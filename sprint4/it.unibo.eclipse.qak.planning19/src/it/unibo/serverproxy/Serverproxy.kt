/* Generated by AN DISI Unibo */ 
package it.unibo.serverproxy

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Serverproxy ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val actor=this
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  fridgeProxy starting")
						itunibo.coap.server.CoapServerControl.create(actor,"fridge")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&&  fridgeProxy waiting for command")
					}
					 transition(edgeName="t00",targetState="putTask",cond=whenDispatch("put"))
					transition(edgeName="t01",targetState="showStateTask",cond=whenDispatch("showState"))
					transition(edgeName="t02",targetState="getTask",cond=whenDispatch("get"))
					transition(edgeName="t03",targetState="checkAvailability",cond=whenDispatch("isAvailable"))
					transition(edgeName="t04",targetState="respond",cond=whenDispatch("yes"))
					transition(edgeName="t05",targetState="respond",cond=whenDispatch("no"))
					transition(edgeName="t06",targetState="respond",cond=whenDispatch("state"))
					transition(edgeName="t07",targetState="respond",cond=whenDispatch("remove"))
				}	 
				state("respond") { //this:State
					action { //it:State
						val response=currentMsg.msgContent()
						itunibo.coap.server.CoapServerControl.coapRespond(response)
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("putTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("put(ARG)"), Term.createTerm("put(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Content = payloadArg(0)
								forward("put", "put($Content)" ,"fridge" ) 
						}
					}
					 transition(edgeName="t08",targetState="respond",cond=whenDispatch("remove"))
				}	 
				state("getTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("get(ARG)"), Term.createTerm("get(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Content = payloadArg(0)
								forward("get", "get($Content)" ,"fridge" ) 
						}
					}
					 transition(edgeName="t09",targetState="respond",cond=whenDispatch("put"))
				}	 
				state("checkAvailability") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("isAvailable(ARG)"), Term.createTerm("isAvailable(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Content = payloadArg(0)
								forward("isAvailable", "isAvailable($Content)" ,"fridge" ) 
						}
					}
					 transition(edgeName="t010",targetState="respond",cond=whenDispatch("yes"))
					transition(edgeName="t011",targetState="respond",cond=whenDispatch("no"))
				}	 
				state("showStateTask") { //this:State
					action { //it:State
						forward("showState", "showState()" ,"fridge" ) 
					}
					 transition(edgeName="t012",targetState="respond",cond=whenDispatch("state"))
				}	 
			}
		}
}
