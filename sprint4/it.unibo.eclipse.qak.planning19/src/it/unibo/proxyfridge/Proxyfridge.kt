/* Generated by AN DISI Unibo */ 
package it.unibo.proxyfridge

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Proxyfridge ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val actor=this
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('fridgeInit.pl')","") //set resVar	
						itunibo.coap.client.CoapClientControl.create(actor,"fridge")
						println("&&&  proxyfridge STARTED")
					}
					 transition( edgeName="goto",targetState="showStateTask", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&&  proxyfridge waiting for command")
					}
					 transition(edgeName="t010",targetState="putTask",cond=whenDispatch("put"))
					transition(edgeName="t011",targetState="showStateTask",cond=whenDispatch("showState"))
					transition(edgeName="t012",targetState="getTask",cond=whenDispatch("get"))
					transition(edgeName="t013",targetState="checkTask",cond=whenDispatch("isAvailable"))
				}	 
				state("showStateTask") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
							val response = itunibo.coap.client.CoapClientControl.send("showState()")
									val FridgeState=response!!.getResponseText()
						
						emit("modelcontent", "modelcontent(content(fridge($FridgeState)))" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("getTask") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("get(ARG)"), Term.createTerm("get(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									val response = itunibo.coap.client.CoapClientControl.send(currentMsg.msgContent())
												val Message = response!!.getResponseText()
								forward("put", "$Message" ,"butlermind" ) 
						}
					}
					 transition( edgeName="goto",targetState="showStateTask", cond=doswitch() )
				}	 
				state("putTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("put(ARG)"), Term.createTerm("put(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
									val response = itunibo.coap.client.CoapClientControl.send(currentMsg.msgContent())
												val Message = response!!.getResponseText()
								forward("remove", "$Message" ,"butlermind" ) 
						}
					}
					 transition( edgeName="goto",targetState="showStateTask", cond=doswitch() )
				}	 
				state("checkTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("isAvailable(ARG)"), Term.createTerm("isAvailable(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 val foodCode = payloadArg(0) 
									val response = itunibo.coap.client.CoapClientControl.send(currentMsg.msgContent())
												val Message = response!!.getResponseText()
												val Id = Message.substringBefore("(")
												forward(Id, Message ,"butlermind" ) 
												println("id:$Id Message:$Message")
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
