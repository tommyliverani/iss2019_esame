/* Generated by AN DISI Unibo */ 
package it.unibo.fridgecoap

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fridgecoap ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val actor=this
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('fridgeInit.pl')","") //set resVar	
						itunibo.coap.server.CoapServerControl.create(actor,"fridge")
						println("&&&  coap fridge STARTED")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&&  fridge waiting for command")
					}
					 transition(edgeName="t00",targetState="putTask",cond=whenDispatch("put"))
					transition(edgeName="t01",targetState="showStateTask",cond=whenDispatch("showState"))
					transition(edgeName="t02",targetState="getTask",cond=whenDispatch("get"))
					transition(edgeName="t03",targetState="checkTask",cond=whenDispatch("isAvailable"))
				}	 
				state("showStateTask") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("getFridgeState(L)","") //set resVar	
						if(currentSolution.isSuccess()) { 
										val FridgeState = itunibo.prolog.prologUtils.parseFoodState(myself,"L")
						itunibo.coap.server.CoapServerControl.coapRespond(FridgeState)
						 }
						else
						{ println("getFridgeState FAIL")
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("getTask") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("get(ARG)"), Term.createTerm("get(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Food = payloadArg(0)
								solve("removeFoodList($Food)","") //set resVar	
								if(currentSolution.isSuccess()) { println("Food = $Food")
								itunibo.coap.server.CoapServerControl.coapRespond("put($Food)")
								 }
								else
								{ println("fridgeGet FAIL")
								 }
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("putTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("put(ARG)"), Term.createTerm("put(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 val Food = payloadArg(0) 
								solve("addFoodList($Food)","") //set resVar	
								if(currentSolution.isSuccess()) { itunibo.coap.server.CoapServerControl.coapRespond("remove($Food)")
								 }
								else
								{ println("fridgePut FAIL")
								 }
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("checkTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("isAvailable(ARG)"), Term.createTerm("isAvailable(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 val foodCode = payloadArg(0) 
								solve("isThereFoodByCode('$foodCode')","") //set resVar	
								if(currentSolution.isSuccess()) { itunibo.coap.server.CoapServerControl.coapRespond("yes($foodCode)")
								 }
								else
								{ itunibo.coap.server.CoapServerControl.coapRespond("no($foodCode)")
								 }
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
