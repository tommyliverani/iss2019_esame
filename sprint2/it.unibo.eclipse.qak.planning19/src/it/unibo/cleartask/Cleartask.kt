/* Generated by AN DISI Unibo */ 
package it.unibo.cleartask

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Cleartask ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  butlermind clearTask")
					}
					 transition(edgeName="t020",targetState="doClear",cond=whenDispatch("clear"))
				}	 
				state("doClear") { //this:State
					action { //it:State
						println("&&&  butlermind CLEARING")
					}
					 transition( edgeName="goto",targetState="manageTable", cond=doswitch() )
				}	 
				state("manageTable") { //this:State
					action { //it:State
						forward("startTask", "startTask(table)" ,"butlertask" ) 
					}
					 transition(edgeName="t021",targetState="manageFridge",cond=whenDispatch("taskDone"))
				}	 
				state("manageFridge") { //this:State
					action { //it:State
						forward("startTask", "startTask(fridge)" ,"butlertask" ) 
					}
					 transition(edgeName="t022",targetState="manageDishwasher",cond=whenDispatch("taskDone"))
				}	 
				state("manageDishwasher") { //this:State
					action { //it:State
						forward("startTask", "startTask(dishwasher)" ,"butlertask" ) 
					}
					 transition(edgeName="t023",targetState="clearDone",cond=whenDispatch("taskDone"))
				}	 
				state("clearDone") { //this:State
					action { //it:State
						println("&&&  butlermind clearDone")
					}
				}	 
			}
		}
}
