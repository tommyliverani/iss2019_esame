/* Generated by AN DISI Unibo */ 
package it.unibo.randomconsumptionactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Randomconsumptionactor ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var enabled = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&& randomconsumptionactor STARTED")
						solve("consult('randomConsumptionActorSupport.pl')","") //set resVar	
						solve("randomConsumptionEnabled(true)","") //set resVar	
						if(currentSolution.isSuccess()) { enabled = true
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitchGuarded({enabled}) )
					transition( edgeName="goto",targetState="doNothing", cond=doswitchGuarded({! enabled}) )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&& radomconsumptionactor waiting for command")
					}
					 transition(edgeName="t013",targetState="timerStart",cond=whenDispatch("prepare"))
				}	 
				state("timerStart") { //this:State
					action { //it:State
						println("&&& randomconsumptionactor starting timer")
						solve("getRandomDelay(R)","") //set resVar	
						if(currentSolution.isSuccess()) { 
									var randomDelay = getCurSol("R").toString().toLong()
									println("randomDelay = $randomDelay")
									delay(randomDelay * 1000)
						solve("produceRandomFoodMessage(F)","") //set resVar	
						if(currentSolution.isSuccess()) { var Food = getCurSol("F").toString()
						println("Food = $Food")
						forward("get", "get($Food)" ,"table" ) 
						emit("modelcontent", "modelcontent(content(info(state(sent_random_consumption))))" ) 
						forward("repeat", "repeat()" ,"randomconsumptionactor" ) 
						 }
						else
						{ println("produceRandomFoodMessage FAIL")
						 }
						 }
						else
						{ println("randomDelay FAIL")
						 }
					}
					 transition(edgeName="t014",targetState="timerStart",cond=whenDispatch("repeat"))
					transition(edgeName="t015",targetState="waitCmd",cond=whenDispatch("clear"))
				}	 
				state("doNothing") { //this:State
					action { //it:State
						println("&&& randomconsumptionactor disabled")
					}
				}	 
			}
		}
}
