/*
* The robot plans a trip from home to the east part of the table
* and executes it.
*/ 
System workinroom 
mqttBroker "localhost" : 1883   
   
Dispatch modelChange  : modelChange( TARGET, VALUE )   
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )


Dispatch onestep       : onestep(DURATION)  
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Dispatch execButlerPlan: execButlerPlan( ACTION )

Dispatch prepare       	: prepare(ARG)
Dispatch clear		: clear(ARG)
Dispatch add		: add(ARG)
Dispatch get		: get(ARG)
Dispatch put         	: put(ARG)
Dispatch remove         : remove(ARG)
Dispatch waitCommand	: waitCommand(ARG)
Dispatch end		: end(ARG)

Dispatch isAvailable	: isAvailable(CODE) // per il controllo presenza cibo nel frigo
Dispatch yes		: yes(ARG)
Dispatch no		: no(ARG)

Dispatch moveButlerTo  : moveButlerTo(X,Y,D) 
Dispatch goalReached   : goalReached(V)  	//V=ok | ko

Dispatch startTask     : startTask(T)		//T = fridge, table, pantry, dishwasher
Dispatch taskDone      : taskDone(V)  	    //V= ... 
Dispatch targetReached : targetReached(V)  	//V=ok | ko

Dispatch robotCmd      : robotCmd( CMD )	

Event  sonarRobot		: sonar( DISTANCE )	     //from  sonar on robot 
Event  stopAppl			: stopAppl( CMD )  
Event  reactivateAppl	: reactivateAppl( CMD )  
Event modelcontent		: modelcontent(CONTENT)
/*
 * 
 */ 
 
Context ctxWorkInRoom     		ip [host="localhost" port=8038]   -mqtt 
Context ctxDummyForMind   		ip [host="otherhost" port=8035]   -mqtt 
Context ctxDummyRoomElements	ip [host="localhost" port=8037]   -mqtt 

ExternalQActor resourcemodel context ctxDummyForMind 
ExternalQActor onestepahead  context ctxDummyForMind
ExternalQActor basicrobot    context ctxDummyForMind


ExternalQActor dishwasher context ctxDummyRoomElements
ExternalQActor pantry context ctxDummyRoomElements
ExternalQActor proxyfridge context ctxDummyRoomElements
ExternalQActor table context ctxDummyRoomElements


QActor butlermind context ctxWorkInRoom{     
["var ButlerStarted = false"]
	State s0 initial {	
		
		println("&&&  butlermind STARTED ")	
		solve(consult("butlermindInit.pl"))	
		solve(consult("prepareFoodList.pl"))
		solve(consult("prepareTablewareList.pl"))
		solve(consult("foodCodePairs.pl"))
  	}
  	Goto waitPrepare
  	
  	
  	State waitPrepare{		
  		println("&&&  butlermind wait prepare")	
  		emit  modelcontent: modelcontent(content( info( state(waiting) ) ))	
  	}
  	Transition t0 whenMsg prepare -> doPrepare
  	
   	
   	State doPrepare{
   		printCurrentMessage
  		println("&&&  butlermind doprepare")
  		//solve(consult(prepareList.pl)) file da fare
  		solve(prepare)
  		emit  modelcontent: modelcontent(content( info( state(preparing) ) ))	
  		forward butlerplanexecutor -m execButlerPlan : execButlerPlan(prepare)
  	}
  	Transition t0  whenMsg targetReached -> msgHandler
     	
     	
    State msgHandler{
    	printCurrentMessage
    	solve(consumeMessage(A,B,C))
    	ifSolved{    		
	    	["	val dest = getCurSol(\"A\").toString()   
	    		val id = getCurSol(\"B\").toString()	
	    		val cont = getCurSol(\"C\").toString()	
				println(\"MESSAGGIO: id:$id dest:$dest cont:$cont \")    	
	    		forward(id, cont ,dest )
			 "]
    	}
    	else{
    		println("&& butlermind error")
    	}
		
    } 	
     Transition t0  
     	whenMsg put   			-> updateState
    	whenMsg remove   		-> updateState
    	whenMsg targetReached   -> msgHandler
    	whenMsg waitCommand		-> waitCommandTask
    	whenMsg end				-> waitPrepare
     
     State updateState{
     	printCurrentMessage
     	onMsg(put: put(ARG)) {
     		["val Arg = payloadArg(0)"]
     		solve(addList($Arg)) 	
     	} 	 	
     	onMsg(remove: remove(ARG)) {
     		["val Arg = payloadArg(0)"]
     		solve(remove($Arg))
    	} 
     	//usare il metodo utility
     	//volendo da fare con una solve sola
     	solve(showFoodState(F))
			ifSolved{
			["
				val FoodState = itunibo.prolog.prologUtils.parseFoodState(myself, \"F\")
			"]
  			emit  modelcontent: modelcontent(content( butlerFood( state( $FoodState) ) ))
  			println("foodState emitted:$FoodState")
  			}else{
   				println("showFoodState FAIL")
   			}
  		solve(showTablewareState(T))
			ifSolved{
			["
				val TablewareState = itunibo.prolog.prologUtils.parseTablewareState(myself, \"T\")
			"]
  			emit  modelcontent: modelcontent(content( butlerTableware( state( $TablewareState) ) ))	
  			println("tableware emitted:$TablewareState")		
   		}else{
   			println("showTablewareState FAIL")
   		}
     }
     Transition t0
     				whenMsg targetReached   -> msgHandler
     
     
     
     State waitCommandTask{
     	emit  modelcontent: modelcontent(content( info( state(waiting) ) ))
     	onMsg(no: no(ARG)){
     		emit  modelcontent: modelcontent(content( info( state(food_not_present) ) ))
     	}
     	println("&& butlermind wait cmd")    	
     }
	Transition t0 
    	 whenMsg add 				-> isAvailableTask
    	 whenMsg clear  			-> doClear
     
     
      State isAvailableTask{
     	onMsg(add: add(ARG)){
     		["val Code = payloadArg(0)"]
     		println("&&& butlermind isAvailableTask")
     		forward proxyfridge -m isAvailable :isAvailable($Code)
     	}	
  	}
  	Transition t0 
  		whenMsg yes				-> doAdd
   		whenMsg no	 			-> waitCommandTask
     
     
     State doAdd{
     	onMsg(yes: yes(ARG)){
     		["val Code = payloadArg(0)"]
     		println("&&&  butlermind doAdd")
     		solve(add($Code))
     		emit  modelcontent: modelcontent(content( info( state(Adding) ) ))	
     		forward butlerplanexecutor -m execButlerPlan : execButlerPlan(add)
     	}	
  	}
  	Transition t0 
  			whenMsg targetReached   -> msgHandler
  	 
  	
  	State doClear{    	
     	println("&&& butlermind doClear")
     	solve(clear)	
     	emit  modelcontent: modelcontent(content( info( state(cleaning) ) ))	
     	forward butlerplanexecutor -m execButlerPlan : execButlerPlan(clear)
     		
  	}
  	Transition t0 
  			whenMsg targetReached   -> msgHandler
     
}	


QActor butlerplanexecutor context ctxWorkInRoom{   
["
var PlanCompleted = false
var CurTarget     = \"home\"
var CurDirection  = \"south\"
"]
	State s0 initial {	
 		solve( consult(  "butlerplansapriori.pl"  ) ) 
  	}
  	Goto doWork
  	
  	State doWork{
  		println("&&& butlerplanexecutor doWork")	
  	}
  	Transition t0 whenMsg execButlerPlan -> doButlerPlan

  	State doButlerPlan{
  		["var action =\"\" "]
  		onMsg( execButlerPlan : execButlerPlan(ACTION) ){
  			["action = payloadArg(0)"]
 			println("&&&  butlerplanexecutor execButlerPlan $action ")		 			
  			solve( storePlan( "$action"  ) )  			
  		}
  	}
  	Goto execButlerPlan
  	
  	State execButlerPlan{
  		solve( consume( A,X,Y,D ) )
  		ifSolved{
["
CurTarget    = getCurSol(\"A\").toString()
CurDirection = getCurSol(\"D\").toString()
val Target = \"Target=\" + CurTarget +  \" X=\" + getCurSol(\"X\") + \" Y=\" + getCurSol(\"Y\") + \" DIRECTION=\" + getCurSol(\"D\")  
"]
  			println( "consume( $Target )"  ) 
   			forward workerinroom -m moveButlerTo : moveButlerTo(#X,#Y,#D)
  		}else{ ["PlanCompleted = true"] }
  	}
  	Goto planExecuted if "PlanCompleted" else waitEndOfButlerPlanMove
  	
  	State waitEndOfButlerPlanMove{}
  	Transition t0 whenMsg goalReached -> doTheButlerJob

  	State doTheButlerJob{
		["val ButlerDirection = itunibo.planner.moveUtils.getDirection(myself)"]
   		println("butlerplanexecutor has reached $CurTarget/direction=$CurDirection, ButlerDirection=$ButlerDirection" ) 
   		if "CurTarget==\"table\"" { println("butlerplanexecutor works on the table " ) }
  		//Rotate the butler to perform the job
  		run itunibo.applUtil.applUtil.changeDirection( myself, CurDirection )
  		forward  butlermind -m targetReached : targetReached(ok)  	
  		run itunibo.planner.moveUtils.showCurrentRobotState()
  		delay 2000
  		//solve( dialog(F) )		//wait after goalReached
  	}
  	Goto execButlerPlan
  	
  	State planExecuted{
  		["PlanCompleted = false"]		//reset to redo
  	}
  	Goto doWork
  	

}

/* 
 * =============================================
 * workerinroom
 * =============================================
 */
QActor workerinroom context ctxWorkInRoom{     
["
var mapEmpty    = false
val mapname     = \"roomMbotWithTable\" //yyy \"roomMapWithTable\"

var Curmove     = \"\" 
var curmoveIsForward = false 

//REAL ROBOT
//var StepTime   = 1000 	 
//var PauseTime  = 500 

//VIRTUAL ROBOT
var StepTime   = 380		//for virtual // modificato era a 330
var PauseTime  = 500

var PauseTimeL  = PauseTime.toLong()

var timePreStep = 1L // per calcolo time backstep
var crashCounter = 0 // per riprovare a muoversi avanti supponendo ostacolo mobile
var timeBack = -1 // tempo di backstep

"]	 
	State s0 initial {	    
	    solve( consult("moves.pl")	 )
		run itunibo.coap.client.resourceObserverCoapClient.create( "coap://localhost:5683/resourcemodel" )
 		run itunibo.planner.plannerUtil.initAI()
  		run itunibo.planner.moveUtils.loadRoomMap( myself, mapname )	
  		run itunibo.planner.moveUtils.showCurrentRobotState()
	 	["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  "]
	 	forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
	 	println("&&&  workerinroom STARTED")	
 	}  
	Transition t0 whenMsg moveButlerTo -> setGoalAndDo
  
  	State setGoalAndDo{
  		onMsg( moveButlerTo : moveButlerTo(X,Y,D) ) {
  			printCurrentMessage
  			["storeCurrentMessageForReply()"]  	//TODO: introduce a qak operation
  			run itunibo.planner.plannerUtil.setGoal(payloadArg(0),payloadArg(1))
  			run itunibo.planner.moveUtils.doPlan( myself )
  		}
  	}
  	Goto executePlannedActions   
  
	State executePlannedActions{ 
		//solve( showMoves ) 
		solve( retract( move(M) ) ) 
		ifSolved {  
			["Curmove = getCurSol(\"M\").toString() 
              curmoveIsForward=(Curmove == \"w\")
	        "]
		} else { ["Curmove = \"\"; curmoveIsForward=false"]  }  
		//println("executePlannedActions doing $Curmove")
 	}
	Goto checkAndDoAction  if "(Curmove.length>0) " else goalOk 

 	State goalOk{		  
 		//run itunibo.planner.moveUtils.showCurrentRobotState()
	 	["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  "]
	 	forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
	 	["replyToCaller(\"goalReached\", \"goalReached(ok)\")"]  //TODO: introduce a qak operation
	}
	Transition t0 whenMsg moveButlerTo -> setGoalAndDo
  	
 	//Execute the move if it is a rotation or halt
	State checkAndDoAction{	 }
	Goto doForwardMove if "curmoveIsForward" else doTheMove
	  
	State doTheMove{
 		run itunibo.planner.moveUtils.rotate(myself, Curmove, PauseTime) //modifies also the planner state 		 
  	}
	Goto executePlannedActions 
	
 	State doForwardMove{
 		delayVar PauseTimeL  //Otherwise is too fast, even with remote interaction
 		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime) //forwards to onestepahead
		["timePreStep = System.currentTimeMillis()"]
	} 
	Transition t0   whenEvent stopAppl -> handleStopAppl
					whenMsg stepOk     -> handleStepOk   
					whenMsg stepFail   -> hadleStepFail 	
    	
    	
   State handleStopAppl{
    	println("APPLICATION STOPPED. Waiting for a reactivate")
    } 
    Transition t0  whenEvent reactivateAppl -> handleReactivateAppl
    
    State handleReactivateAppl{
    	println("APPLICATION RESUMED")
    } 
	Transition t0   whenMsg stepOk   -> handleStepOk   
					whenMsg stepFail -> hadleStepFail 	
    
	State handleStepOk{
 		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
 		["crashCounter = 0"] // o non viene resettato in caso di ostacolo mobile
	}
	Goto executePlannedActions
	
	/* We could reach this state since the robot moves are not precise enough */
 	State hadleStepFail{
 		if "crashCounter == 0"{
 			/* 
 		 	*  Cerco di calcolare il tempo di backstep perfetto per evitare successive 
 		 	*  collisioni, chiaramente è soggetto al ritardo variabile dovuto alla 
 		 	*  computazione e ai messaggi, non va granché bene
 		 	*/
			println("timeBack fatto da noi")
 			["timeBack = (System.currentTimeMillis() - timePreStep - 45).toInt()"]
 			println("timeBack = $timeBack")
			
			/*
 			onMsg(stepFail : stepFail(Obs, Time)){
 				["timeBack = payloadArg(1).toString().toInt()"]
 				println("timeBack col payload")
 				println("timeBack = $timeBack")
 			}
 			*/
 		}
 		
 		["crashCounter++"]
 		// backstep senza usare delay che non accetta variabili
		run itunibo.planner.moveUtils.backToCompensate(myself, timeBack, 0)
 		
 		if "(crashCounter > 1)"{ // messo in modo da sbattere max 2 volte
			println("Static obstacle found!")
			["val ButlerDirection = itunibo.planner.moveUtils.getDirection(myself)"]
			println("ButlerDirection = $ButlerDirection")
		
			println("Updating map with the static obstacle just found")
			run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
			println("New map")
			run itunibo.planner.moveUtils.showCurrentRobotState()
		
			println("Updating plan")
			solve( retractall( move(_) ))
			run itunibo.planner.moveUtils.doPlan(myself)

			["crashCounter = 0"]
		}
		else{
			println("Found obstacle, supposedly a moving one")
			["var timesLeft = 2 - crashCounter"] // modificato per match con lo sbattere max 2 volte
			println("Trying to move ahead other $timesLeft times")
			delay 2000 // delay di 2 secondi perché l'eventuale moving obstacle si sposti
			
			/*
			 * Ho bisogno di riporre nel kb l'ultima mossa consumata (per forza una w)
			 * altrimenti è come se andassimo avanti. Due modi:
			 * - asserta per rimettere la mossa in cima e farla consumare per prima
			 * - retractall e poi doPlan, tanto non ho ancora posto la X sulla mappa,
			 *   il piano sarà ricalcolato uguale
			 */
			solve( asserta(move(w)) )
		}
	}
	Goto executePlannedActions
}




