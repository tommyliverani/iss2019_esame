/* Generated by AN DISI Unibo */ 
package it.unibo.butlertask

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butlertask ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  butlertask STARTED  ")
					}
					 transition(edgeName="t024",targetState="execTask",cond=whenDispatch("startTask"))
				}	 
				state("execTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("startTask(T)"), Term.createTerm("startTask(pantry)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(1000) 
								println("&&&  butler going to PANTRY")
								forward("moveButlerTo", "moveButlerTo(1,4,downDir)" ,"workerinroom" ) 
						}
						if( checkMsgContent( Term.createTerm("startTask(T)"), Term.createTerm("startTask(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(1000) 
								println("&&&  butler going  to FRIDGE")
								forward("moveButlerTo", "moveButlerTo(6,0,upDir)" ,"workerinroom" ) 
						}
						if( checkMsgContent( Term.createTerm("startTask(T)"), Term.createTerm("startTask(dishwasher)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(1000) 
								println("&&&  butler going to DISHWASHER")
								forward("moveButlerTo", "moveButlerTo(5,4,downDir)" ,"workerinroom" ) 
						}
						if( checkMsgContent( Term.createTerm("startTask(T)"), Term.createTerm("startTask(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("goalReached", "goalReached(ok)" ,"butlertask" ) 
						}
					}
					 transition(edgeName="t025",targetState="reachTheTable",cond=whenDispatch("goalReached"))
				}	 
				state("reachTheTable") { //this:State
					action { //it:State
						delay(1000) 
						println("&&&  butler going to TABLE")
						forward("moveButlerTo", "moveButlerTo(5,3,downDir)" ,"workerinroom" ) 
					}
					 transition(edgeName="t026",targetState="againToHome",cond=whenDispatch("goalReached"))
				}	 
				state("againToHome") { //this:State
					action { //it:State
						delay(1000) 
						println("&&&  butler going to HOME")
						forward("moveButlerTo", "moveButlerTo(0,0,downDir)" ,"workerinroom" ) 
					}
					 transition(edgeName="t027",targetState="taskCompleted",cond=whenDispatch("goalReached"))
				}	 
				state("taskCompleted") { //this:State
					action { //it:State
						println("&&& sending taskDone to preparetask")
						forward("taskDone", "taskDone(ok)" ,"preparetask" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
